import { createUserWithEmailAndPassword, updateProfile, signInWithEmailAndPassword } from "firebase/auth";
import { auth } from "../utils/firebaseConfig";
import { getCSRFCookie } from "@/utils/csrfCookie";

// Gets the public key for E2EE of user data
// Also retrieves as CSRF cookie to prevent cross site forgery requests
export async function fetchPublicKeyAndCSRF(): Promise<string> {

    try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/auth/public-key-csrf` ,{
            credentials: "include"
        });
        const data = await response.json();
        return data.publicKey;
    } catch (error) {
        console.error("Error fetching public key:", error);
        return "";
    }

}

interface RegisterUserResponse {
    token: string;
    uid: string;
}

export const registerUserThroughFirebase = async (
    email: string, 
    password: string, 
    displayName: string
): Promise<RegisterUserResponse> => {
    try {
        const userCredential = await createUserWithEmailAndPassword(auth, email, password);
        await updateProfile(userCredential.user, { displayName });
        const token = await userCredential.user.getIdToken(true);
        return { token, uid: userCredential.user.uid };
    } catch (error) {
        // Presumably, there will be some possible feedback from firebase if pwd
        // does not meet certain criteria. Handle that here?
        console.error("Error registering user:", error);
        throw error;
    }
};

interface RegistrationData {
    fullname: string;
    username: string;
    uid: string;
}

export const submitEncryptedRegistration = async (
    encryptedData: RegistrationData,
    token: string
):Promise<boolean> => {
    const csrfToken = getCSRFCookie('csrfToken');

    const headers: Record<string, string> = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`, // this token was generated by Firebase
    };
    // Server will not like it if this csrfToken is not valid
    if (csrfToken) {
        headers['X-CSRF-Token'] = csrfToken;
    }

    try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/auth/register`, {
            method: 'POST',
            headers,
            body: JSON.stringify(encryptedData),
            credentials: "include"
        });
        return response.ok;
    } catch (error) {
        console.error("Error submitting registration:", error);
        return false;
    }
}

interface LoginUserResponse {
    token: string;
    uid: string;
}

export const loginThroughFirebase = async (
    email: string,
    password: string
):Promise<LoginUserResponse> => {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    const token = await userCredential.user.getIdToken();
    return { token, uid: userCredential.user.uid };
}   

interface LoginData {
    uid: string;
}

export const submitEncryptedLogin = async (
    encryptedData: LoginData,
    token: string
):Promise<boolean> => {
    const csrfToken = getCSRFCookie('csrfToken');

    const headers: Record<string, string> = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`, // this token was generated by Firebase
    };
    // Server will not like it if this csrfToken is not valid
    if (csrfToken) {
        headers['X-CSRF-Token'] = csrfToken;
    }
    try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/auth/login`, {
            method: 'POST',
            headers,
            body: JSON.stringify(encryptedData),
            credentials: 'include'
        });
        console.log(await response.json());
        return response.ok;
    } catch (error) {
        console.error("Error submitting login:", error);
        return false;
    }
}

export const verifySession = async (

): Promise<number | undefined> => {
    const csrfToken = getCSRFCookie('csrfToken');
    const headers: Record<string, string> = {};
    if (csrfToken) {
        headers['X-CSRF-Token'] = csrfToken;
    }

    try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/auth/verify-session`, {
            headers,
            credentials: 'include'
          });
          return response.status;
    } catch (error) {
        console.error("Error verifying session:", error);
        return 401;
    }
};

export const submitLogoutRequest = async (

): Promise<boolean> => {
    const csrfToken = getCSRFCookie('csrfToken');
    const headers: Record<string, string> = {};
    if (csrfToken) {
        headers['X-CSRF-Token'] = csrfToken;
    }

    try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/auth/logout`, {
            headers,
            credentials: 'include'
        });
        return response.ok;
    } catch (error) {
        console.error("Error logging out:", error);
        return false;
    }
};

